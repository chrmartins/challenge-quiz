{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction fetchGraphQL(_x, _x2) {\n  return _fetchGraphQL.apply(this, arguments);\n}\n\nfunction _fetchGraphQL() {\n  _fetchGraphQL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(text, variables) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch('http://localhost:3001', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                query: text,\n                variables: variables\n              })\n            });\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchGraphQL.apply(this, arguments);\n}\n\nexport default fetchGraphQL;","map":{"version":3,"sources":["/home/chrmartins/myprojects/challenge-questions/src/service/fetchGraphQl.js"],"names":["fetchGraphQL","text","variables","fetch","method","headers","body","JSON","stringify","query","response","json"],"mappings":";;;SAAeA,Y;;;;;2EAAf,iBAA4BC,IAA5B,EAAkCC,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACyBC,KAAK,CAAC,uBAAD,EAA0B;AACpDC,cAAAA,MAAM,EAAE,MAD4C;AAEpDC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAF2C;AAKpDC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,gBAAAA,KAAK,EAAER,IADY;AAEnBC,gBAAAA,SAAS,EAATA;AAFmB,eAAf;AAL8C,aAA1B,CAD9B;;AAAA;AACQQ,YAAAA,QADR;AAAA;AAAA,mBAYeA,QAAQ,CAACC,IAAT,EAZf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAeA,eAAeX,YAAf","sourcesContent":["async function fetchGraphQL(text, variables) {\n  const response = await fetch('http://localhost:3001', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: text,\n      variables\n    })\n  })\n\n  return await response.json()\n}\n\nexport default fetchGraphQL\n"]},"metadata":{},"sourceType":"module"}