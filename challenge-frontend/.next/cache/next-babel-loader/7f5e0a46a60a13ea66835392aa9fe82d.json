{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport fetchGraphQl from '../../service/fetchGraphQl';\n\nfunction ViewQuestions() {\n  var _useState = useState([]),\n      listQuestions = _useState[0],\n      setListQuestions = _useState[1];\n\n  var _useState2 = useState(''),\n      questionID = _useState2[0],\n      setQuestionID = _useState2[1];\n\n  var _useState3 = useState(''),\n      question = _useState3[0],\n      setQuestion = _useState3[1];\n\n  var _useState4 = useState(0),\n      reload = _useState4[0],\n      setReload = _useState4[1]; //Requisição ao servidor com graphql\n\n\n  useEffect(function () {\n    function getQuestions() {\n      return _getQuestions.apply(this, arguments);\n    }\n\n    function _getQuestions() {\n      _getQuestions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var query, questions;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetchGraphQl(\"\\n        query questions {\\n          questions{\\n            id\\n            question\\n            options\\n            answerID\\n          }\\n        }\\n      \");\n\n              case 2:\n                query = _context.sent;\n                questions = query.data.questions;\n                setListQuestions(questions);\n                console.log(questions);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _getQuestions.apply(this, arguments);\n    }\n\n    getQuestions();\n  }, [reload]);\n\n  function getQuestion(_x) {\n    return _getQuestion.apply(this, arguments);\n  }\n\n  function _getQuestion() {\n    _getQuestion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n      var query, _question;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setQuestionID(id);\n              _context2.next = 3;\n              return fetchGraphQl(\"\\n      query question($id: ID!) {\\n        question (id: $id){\\n          id\\n          question\\n          options\\n          answerID\\n        }\\n      }\\n    \", {\n                id: id\n              });\n\n            case 3:\n              query = _context2.sent;\n\n              if (query.data) {\n                _question = query.data.question;\n                setQuestion(_question.question);\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _getQuestion.apply(this, arguments);\n  }\n\n  function deleteQuestion(_x2) {\n    return _deleteQuestion.apply(this, arguments);\n  }\n\n  function _deleteQuestion() {\n    _deleteQuestion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n      var query, _deleteQuestion2;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              console.log('deletar');\n              _context3.next = 3;\n              return fetchGraphQl(\"\\n    mutation deleteQuestion($id: ID) {\\n      deleteQuestion (\\n        id: $id\\n      ){\\n        id\\n      }\\n    }\\n  \", {\n                id: id\n              });\n\n            case 3:\n              query = _context3.sent;\n\n              if (query.data) {\n                _deleteQuestion2 = query.data.deleteQuestion;\n\n                if (_deleteQuestion2 === null) {\n                  success('Questão excluída com sucesso.');\n                }\n              }\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _deleteQuestion.apply(this, arguments);\n  }\n\n  function success(text) {\n    var ctrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (ctrl) {\n      alert(text);\n      setReload(reload + 1);\n      setQuestionID('1');\n    }\n\n    setQuestion('');\n  }\n\n  return __jsx(\"div\", {\n    className: \"ViewQuestions\"\n  }, __jsx(\"div\", {\n    id: \"list-question\",\n    className: \"box-div\"\n  }, __jsx(\"h2\", null, \"Perguntas Cadastradas\"), __jsx(\"ul\", {\n    id: \"question-ul\"\n  }, listQuestions.map(function (quest, index) {\n    return __jsx(\"li\", {\n      key: quest.id,\n      className: index % 2 == 0 ? 'separator' : ''\n    }, __jsx(\"div\", null, ' ', __jsx(\"span\", {\n      className: \"question-ul-number\"\n    }, index + 1), ' ', __jsx(\"span\", null, quest.question.substring(0, 80)), ' '), __jsx(\"div\", null, __jsx(\"button\", {\n      className: \"btn-edit\",\n      onClick: function onClick() {\n        return getQuestion(quest.id);\n      }\n    }, \"EDITAR\"), __jsx(\"button\", {\n      className: \"btn-del\",\n      onClick: function onClick() {\n        return deleteQuestion(quest.id);\n      }\n    }, \"EXCLUIR\")));\n  }))));\n}\n\nexport default ViewQuestions;","map":null,"metadata":{},"sourceType":"module"}