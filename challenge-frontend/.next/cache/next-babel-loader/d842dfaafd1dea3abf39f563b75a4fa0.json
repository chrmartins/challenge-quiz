{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/chrmartins/myprojects/challenge-questions/src/components/ListView/index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport fetchGraphQl from '../../service/fetchGraphQl';\n\nfunction ViewQuestions() {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState([]),\n      listQuestions = _useState[0],\n      setListQuestions = _useState[1];\n\n  var _useState2 = useState(''),\n      questionID = _useState2[0],\n      setQuestionID = _useState2[1];\n\n  var _useState3 = useState(''),\n      question = _useState3[0],\n      setQuestion = _useState3[1];\n\n  var _useState4 = useState(0),\n      reload = _useState4[0],\n      setReload = _useState4[1]; //Requisição ao servidor com graphql\n\n\n  useEffect(function () {\n    function getQuestions() {\n      return _getQuestions.apply(this, arguments);\n    }\n\n    function _getQuestions() {\n      _getQuestions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var query, questions;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetchGraphQl(\"\\n        query questions {\\n          questions{\\n            id\\n            question\\n            options\\n            answerID\\n          }\\n        }\\n      \");\n\n              case 2:\n                query = _context.sent;\n                questions = query.data.questions;\n                setListQuestions(questions);\n                console.log(questions);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _getQuestions.apply(this, arguments);\n    }\n\n    getQuestions();\n  }, [reload]);\n\n  function getQuestion(_x) {\n    return _getQuestion.apply(this, arguments);\n  }\n\n  function _getQuestion() {\n    _getQuestion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n      var query, _question;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setQuestionID(id);\n              _context2.next = 3;\n              return fetchGraphQl(\"\\n      query question($id: ID!) {\\n        question (id: $id){\\n          id\\n          question\\n          options\\n          answerID\\n        }\\n      }\\n    \", {\n                id: id\n              });\n\n            case 3:\n              query = _context2.sent;\n\n              if (query.data) {\n                _question = query.data.question;\n                setQuestion(_question.question);\n                console.log(_question);\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return _getQuestion.apply(this, arguments);\n  }\n\n  function deleteQuestion(_x2) {\n    return _deleteQuestion.apply(this, arguments);\n  }\n\n  function _deleteQuestion() {\n    _deleteQuestion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(id) {\n      var query, _deleteQuestion2;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              console.log('deletar');\n              _context3.next = 3;\n              return fetchGraphQl(\"\\n    mutation deleteQuestion($id: ID) {\\n      deleteQuestion (\\n        id: $id\\n      ){\\n        id\\n      }\\n    }\\n  \", {\n                id: id\n              });\n\n            case 3:\n              query = _context3.sent;\n\n              if (query.data) {\n                _deleteQuestion2 = query.data.deleteQuestion;\n\n                if (_deleteQuestion2 === null) {\n                  success('Questão excluída com sucesso.');\n                }\n              }\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n    return _deleteQuestion.apply(this, arguments);\n  }\n\n  function success(text) {\n    var ctrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (ctrl) {\n      alert(text);\n      setReload(reload + 1);\n      setQuestionID('1');\n    }\n\n    setQuestion('');\n  }\n\n  return __jsx(\"div\", {\n    className: \"ViewQuestions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    id: \"list-question\",\n    className: \"box-div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, \"Perguntas Cadastradas\"), __jsx(\"ul\", {\n    id: \"question-ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, listQuestions.map(function (quest, index) {\n    return __jsx(\"li\", {\n      key: quest.id,\n      className: index % 2 === 0 ? 'separator' : '',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 15\n      }\n    }, ' ', __jsx(\"span\", {\n      className: \"question-ul-number\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }, index + 1), ' ', __jsx(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, quest.question.substring(0, 80)), ' '), __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 15\n      }\n    }, __jsx(\"button\", {\n      className: \"btn-edit\",\n      onClick: function onClick() {\n        return getQuestion(quest.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }, \"EDITAR\"), __jsx(\"button\", {\n      className: \"btn-del\",\n      onClick: function onClick() {\n        return deleteQuestion(quest.id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }\n    }, \"EXCLUIR\")));\n  }))));\n}\n\n_s(ViewQuestions, \"90e1A1Vs1P4v635Pd9NhUgCZFlM=\");\n\n_c = ViewQuestions;\nexport default ViewQuestions;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewQuestions\");","map":{"version":3,"sources":["/home/chrmartins/myprojects/challenge-questions/src/components/ListView/index.tsx"],"names":["React","useEffect","useState","fetchGraphQl","ViewQuestions","listQuestions","setListQuestions","questionID","setQuestionID","question","setQuestion","reload","setReload","getQuestions","query","questions","data","console","log","getQuestion","id","deleteQuestion","success","text","ctrl","alert","map","quest","index","substring"],"mappings":"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","sourcesContent":["﻿import React, { useEffect, useState } from 'react'\nimport fetchGraphQl from '../../service/fetchGraphQl'\n\nfunction ViewQuestions() {\n  const [listQuestions, setListQuestions] = useState([])\n  const [questionID, setQuestionID] = useState('')\n\n  const [question, setQuestion] = useState('')\n\n  const [reload, setReload] = useState(0)\n\n  //Requisição ao servidor com graphql\n  useEffect(() => {\n    async function getQuestions() {\n      const query = await fetchGraphQl(`\n        query questions {\n          questions{\n            id\n            question\n            options\n            answerID\n          }\n        }\n      `)\n\n      const { questions } = query.data\n      setListQuestions(questions)\n\n      console.log(questions)\n    }\n\n    getQuestions()\n  }, [reload])\n\n  async function getQuestion(id: string) {\n    setQuestionID(id)\n\n    const query = await fetchGraphQl(\n      `\n      query question($id: ID!) {\n        question (id: $id){\n          id\n          question\n          options\n          answerID\n        }\n      }\n    `,\n      { id: id }\n    )\n\n    if (query.data) {\n      const { question } = query.data\n\n      setQuestion(question.question)\n\n      console.log(question)\n    }\n  }\n\n  async function deleteQuestion(id: string) {\n    console.log('deletar')\n\n    const query = await fetchGraphQl(\n      `\n    mutation deleteQuestion($id: ID) {\n      deleteQuestion (\n        id: $id\n      ){\n        id\n      }\n    }\n  `,\n      { id: id }\n    )\n\n    if (query.data) {\n      const { deleteQuestion } = query.data\n\n      if (deleteQuestion === null) {\n        success('Questão excluída com sucesso.')\n      }\n    }\n  }\n\n  function success(text, ctrl = true) {\n    if (ctrl) {\n      alert(text)\n      setReload(reload + 1)\n      setQuestionID('1')\n    }\n\n    setQuestion('')\n  }\n\n  return (\n    <div className=\"ViewQuestions\">\n      <div id=\"list-question\" className=\"box-div\">\n        <h2>Perguntas Cadastradas</h2>\n        <ul id=\"question-ul\">\n          {listQuestions.map((quest, index) => (\n            <li key={quest.id} className={index % 2 === 0 ? 'separator' : ''}>\n              <div>\n                {' '}\n                <span className=\"question-ul-number\">{index + 1}</span>{' '}\n                <span>{quest.question.substring(0, 80)}</span>{' '}\n              </div>\n              <div>\n                <button\n                  className=\"btn-edit\"\n                  onClick={() => getQuestion(quest.id)}\n                >\n                  EDITAR\n                </button>\n                <button\n                  className=\"btn-del\"\n                  onClick={() => deleteQuestion(quest.id)}\n                >\n                  EXCLUIR\n                </button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default ViewQuestions\n"]},"metadata":{},"sourceType":"module"}