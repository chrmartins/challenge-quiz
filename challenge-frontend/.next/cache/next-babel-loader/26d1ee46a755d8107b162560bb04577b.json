{"ast":null,"code":"var _jsxFileName = \"/home/chrmartins/myprojects/challenge-questions/src/components/ListView/index.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport fetchGraphQl from 'service/fetchGraphQl';\nimport Router from 'next/router';\nimport * as S from './styles';\n\nfunction ViewQuestions() {\n  const {\n    0: listQuestions,\n    1: setListQuestions\n  } = useState([]); // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  const {\n    0: question,\n    1: setQuestion\n  } = useState('');\n  const {\n    0: reload,\n    1: setReload\n  } = useState(0); //Requisição ao servidor com graphql\n\n  useEffect(() => {\n    async function getQuestions() {\n      const query = await fetchGraphQl(`\n        query questions {\n          questions{\n            id\n            question\n            options\n            answerID\n          }\n        }\n      `);\n      const {\n        questions\n      } = query.data;\n      setListQuestions(questions);\n      console.log(questions);\n    }\n\n    getQuestions();\n  }, [reload]);\n\n  async function getQuestion(id) {\n    Router.push(`/register?questionId=${id}`);\n  }\n\n  async function deleteQuestion(id) {\n    console.log('deletar');\n    const query = await fetchGraphQl(`\n    mutation deleteQuestion($id: ID) {\n      deleteQuestion (\n        id: $id\n      ){\n        id\n      }\n    }\n  `, {\n      id: id\n    });\n\n    if (query.data) {\n      const {\n        deleteQuestion\n      } = query.data;\n\n      if (deleteQuestion === null) {\n        success('Questão excluída com sucesso.');\n      }\n    }\n  }\n\n  function success(text, ctrl = true) {\n    if (ctrl) {\n      alert(text);\n      setReload(reload + 1);\n    }\n\n    setQuestion('');\n  }\n\n  return __jsx(S.Wrapper, {\n    className: \"ViewQuestions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    id: \"list-question\",\n    className: \"box-div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, __jsx(\"ul\", {\n    id: \"question-ul\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, listQuestions.map((quest, index) => __jsx(\"li\", {\n    key: quest.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }, __jsx(\"span\", {\n    className: \"question-ul-number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }\n  }, index + 1), ' ', __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, quest.question)), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, __jsx(S.Button, {\n    className: \"btn-edit\",\n    onClick: () => getQuestion(quest.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, \"EDITAR\"), __jsx(S.Button, {\n    className: \"btn-del\",\n    onClick: () => deleteQuestion(quest.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, \"EXCLUIR\")))))));\n}","map":{"version":3,"sources":["/home/chrmartins/myprojects/challenge-questions/src/components/ListView/index.tsx"],"names":["React","useEffect","useState","fetchGraphQl","Router","S","ViewQuestions","listQuestions","setListQuestions","question","setQuestion","reload","setReload","getQuestions","query","questions","data","console","log","getQuestion","id","push","deleteQuestion","success","text","ctrl","alert","map","quest","index"],"mappings":"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","sourcesContent":["﻿import React, { useEffect, useState } from 'react'\nimport fetchGraphQl from 'service/fetchGraphQl'\nimport Router from 'next/router'\n\nimport * as S from './styles'\n\nfunction ViewQuestions() {\n  const [listQuestions, setListQuestions] = useState([])\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [question, setQuestion] = useState('')\n\n  const [reload, setReload] = useState(0)\n\n  //Requisição ao servidor com graphql\n  useEffect(() => {\n    async function getQuestions() {\n      const query = await fetchGraphQl(`\n        query questions {\n          questions{\n            id\n            question\n            options\n            answerID\n          }\n        }\n      `)\n\n      const { questions } = query.data\n      setListQuestions(questions)\n\n      console.log(questions)\n    }\n\n    getQuestions()\n  }, [reload])\n\n  async function getQuestion(id: string) {\n    Router.push(`/register?questionId=${id}`)\n  }\n\n  async function deleteQuestion(id: string) {\n    console.log('deletar')\n\n    const query = await fetchGraphQl(\n      `\n    mutation deleteQuestion($id: ID) {\n      deleteQuestion (\n        id: $id\n      ){\n        id\n      }\n    }\n  `,\n      { id: id }\n    )\n\n    if (query.data) {\n      const { deleteQuestion } = query.data\n\n      if (deleteQuestion === null) {\n        success('Questão excluída com sucesso.')\n      }\n    }\n  }\n\n  function success(text, ctrl = true) {\n    if (ctrl) {\n      alert(text)\n      setReload(reload + 1)\n    }\n\n    setQuestion('')\n  }\n\n  return (\n    <S.Wrapper className=\"ViewQuestions\">\n      <div id=\"list-question\" className=\"box-div\">\n        <ul id=\"question-ul\">\n          {listQuestions.map((quest, index) => (\n            <li key={quest.id}>\n              <div>\n                <span className=\"question-ul-number\">{index + 1}</span>{' '}\n                <span>{quest.question}</span>\n              </div>\n              <div>\n                <S.Button\n                  className=\"btn-edit\"\n                  onClick={() => getQuestion(quest.id)}\n                >\n                  EDITAR\n                </S.Button>\n                <S.Button\n                  className=\"btn-del\"\n                  onClick={() => deleteQuestion(quest.id)}\n                >\n                  EXCLUIR\n                </S.Button>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </S.Wrapper>\n  )\n          }\n"]},"metadata":{},"sourceType":"module"}